{"version":3,"file":"static/js/544.04177a8b.chunk.js","mappings":"8NAEaA,EAAKC,EAAAA,EAAAA,GAAH,wHAQFC,GAAQD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,+HASLG,EAAOH,EAAAA,EAAAA,GAAH,2FAOJI,EAAOJ,EAAAA,EAAAA,IAAH,oP,SCOjB,EA7B0B,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,SAACJ,EAAD,UACGE,EAAOG,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,SAACZ,EAAD,WACE,SAACE,EAAD,CAAOW,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA3C,UACE,UAACF,EAAD,WACGO,GACC,gBACEI,IAAG,yCAAoCJ,GACvCK,IAAKN,KAGP,SAAC,MAAD,CAAoBO,KAAM,MAE3BP,QAXED,EAgBZ,OAEH,SAAC,KAAD,MAGL,C,6BC7BD,IAHsB,WAErB,C,uFCoCD,UAjCa,WACX,OAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAaA,OAZAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IACXE,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJN,EAAUM,EAAWC,QACtB,IACAC,OAAM,SAAAC,GAAK,OAAIA,EAAMC,OAAV,IACXC,SAAQ,WACPT,GAAW,EACZ,GACJ,GAAE,KAGD,+BACE,4BACE,eACEU,MAAO,CACLC,UAAW,SACXC,WAAY,GACZC,cAAe,IAJnB,6BASA,SAAC,IAAD,CAAY7B,OAAQA,IACnBe,IAAW,SAAC,IAAD,QAInB,C,8LCnCKe,EAAW,+BACXC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVC,EAAAA,EAAAA,IAAA,UACdJ,EADc,iCACmBC,EADnB,kBACoCE,EADpC,+CAFU,cAEvBE,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBpB,EAAa,mCAAG,6GAENgB,EAAAA,EAAAA,IAAA,UACdJ,EADc,wCAC0BC,EAD1B,YAFM,cAEnBI,EAFmB,yBAKlBA,EAAKC,MALa,sCAOnB,IAAIC,MAAM,KAAMC,YAPG,yDAAH,qDAWbC,EAAiB,mCAAG,WAAMnC,GAAN,gGAEV8B,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACI1B,EADJ,oBACkB2B,EADlB,2BAFU,cAEvBI,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBE,EAAS,mCAAG,WAAMpC,GAAN,gGAEF8B,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACI1B,EADJ,4BAC0B2B,EAD1B,oBAFE,cAEfI,EAFe,yBAKdA,EAAKC,MALS,sCAOf,IAAIC,MAAM,KAAMC,YAPD,yDAAH,sDAWTG,EAAY,mCAAG,WAAMrC,GAAN,gGAEL8B,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACI1B,EADJ,4BAC0B2B,EAD1B,oBAFK,cAElBI,EAFkB,yBAKjBA,EAAKC,MALY,sCAOlB,IAAIC,MAAM,KAAMC,YAPE,yDAAH,qD","sources":["components/ListMovies/ListMovies.styled.js","components/ListMovies/ListMovies.jsx","components/Loader/Loader.jsx","pages/Home/Home.jsx","service/serviceAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const Li = styled.li`\n  list-style: none;\n  padding: 3px;\n  margin: 0;\n  :hover {\n    // border: 1px solid;\n  }\n`;\nexport const Links = styled(Link)`\n  text-decoration: none;\n  color: black;\n  :hover {\n    color: white;\n    background: black;\n  }\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-bottom: 20px;\n  text-align: center;\n  width: 200px;\n  height: 355px;\n\n  :hover {\n    scale: 1.1;\n    color: white;\n    background: black;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { AiOutlineFileImage } from 'react-icons/ai';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { Card, Li, Links, List } from './ListMovies.styled';\nexport const ListMovies = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <List>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <Li key={id}>\n              <Links to={`/movies/${id}`} state={{ from: location }}>\n                <Card>\n                  {poster_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200${poster_path}`}\n                      alt={title}\n                    />\n                  ) : (\n                    <AiOutlineFileImage size={200} />\n                  )}\n                  {title}\n                </Card>\n              </Links>\n            </Li>\n          );\n        })}\n      </List>\n      <Outlet />\n    </>\n  );\n};\nexport default ListMovies;\n\nListMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const Loader = () => {\n  <div>Loading...</div>;\n};\nexport default Loader;\n","import ListMovies from 'components/ListMovies/ListMovies';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { fetchTrending } from 'service/serviceAPI';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    fetchTrending()\n      .then(respMovies => {\n        setMovies(respMovies.results);\n      })\n      .catch(error => error.message)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div>\n        <h2\n          style={{\n            textAlign: 'center',\n            paddingTop: 20,\n            paddingBottom: 20,\n          }}\n        >\n          Trending today\n        </h2>\n        <ListMovies movies={movies} />\n        {loading && <Loader />}\n      </div>\n    </>\n  );\n};\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '178b07d62e47484c1918df64bd242568';\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&language=en-US&include_adult=false`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchTrending = async () => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=1`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchDetailsMovie = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&page=1&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n"],"names":["Li","styled","Links","Link","List","Card","movies","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","size","useState","setMovies","loading","setLoading","useEffect","fetchTrending","then","respMovies","results","catch","error","message","finally","style","textAlign","paddingTop","paddingBottom","BASE_URL","API_KEY","fetchSearchMovies","query","axios","resp","data","Error","statusText","fetchDetailsMovie","fetchCast","fetchReviews"],"sourceRoot":""}