{"version":3,"file":"static/js/186.45a9f329.chunk.js","mappings":"8LA8CA,UAzCgB,WACd,OAA0CA,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAaH,GAASI,MAAK,SAAAC,GACzBN,EAAiBM,EAAiBC,QACnC,GACF,GAAE,CAACN,KAGF,8BACGF,EAAcS,OAAS,EACtBT,EAAcU,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/B,OACE,gBACEC,MAAO,CACLC,QAAS,GACTC,UAAW,SACXC,QAAS,OACTC,SAAU,OACVC,IAAK,GACLC,eAAgB,iBAPpB,WAYE,yBACE,qCAAaR,QAEf,wBAAKC,MALAF,EAQV,KAED,2EAIP,C,8LC1CKU,EAAW,+BACXC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVC,EAAAA,EAAAA,IAAA,UACdJ,EADc,iCACmBC,EADnB,kBACoCE,EADpC,+CAFU,cAEvBE,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBC,EAAa,mCAAG,6GAENL,EAAAA,EAAAA,IAAA,UACdJ,EADc,wCAC0BC,EAD1B,YAFM,cAEnBI,EAFmB,yBAKlBA,EAAKC,MALa,sCAOnB,IAAIC,MAAM,KAAMC,YAPG,yDAAH,qDAWbE,EAAiB,mCAAG,WAAMpB,GAAN,gGAEVc,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIV,EADJ,oBACkBW,EADlB,2BAFU,cAEvBI,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBG,EAAS,mCAAG,WAAMrB,GAAN,gGAEFc,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIV,EADJ,4BAC0BW,EAD1B,oBAFE,cAEfI,EAFe,yBAKdA,EAAKC,MALS,sCAOf,IAAIC,MAAM,KAAMC,YAPD,yDAAH,sDAWTxB,EAAY,mCAAG,WAAMM,GAAN,gGAELc,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIV,EADJ,4BAC0BW,EAD1B,oBAFK,cAElBI,EAFkB,yBAKjBA,EAAKC,MALY,sCAOlB,IAAIC,MAAM,KAAMC,YAPE,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","service/serviceAPI.js"],"sourcesContent":["// const { useState } = require('react');\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'service/serviceAPI';\nconst Reviews = () => {\n  const [moviesReviews, setMoviesReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchReviews(movieId).then(respMovieReviews => {\n      setMoviesReviews(respMovieReviews.results);\n    });\n  }, [movieId]);\n\n  return (\n    <>\n      {moviesReviews.length > 0 ? (\n        moviesReviews.map(({ id, author, content }) => {\n          return (\n            <ul\n              style={{\n                padding: 30,\n                textAlign: 'center',\n                display: 'flex',\n                flexWrap: 'wrap',\n                gap: 10,\n                justifyContent: 'space-between',\n                // width: 200,\n              }}\n              key={id}\n            >\n              <li>\n                <b> Author: {author}</b>\n              </li>\n              <li>{content}</li>\n            </ul>\n          );\n        })\n      ) : (\n        <p>Sorry, we dont have any review for this movie!</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '178b07d62e47484c1918df64bd242568';\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&language=en-US&include_adult=false`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchTrending = async () => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=1`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchDetailsMovie = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&page=1&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n"],"names":["useState","moviesReviews","setMoviesReviews","movieId","useParams","useEffect","fetchReviews","then","respMovieReviews","results","length","map","id","author","content","style","padding","textAlign","display","flexWrap","gap","justifyContent","BASE_URL","API_KEY","fetchSearchMovies","query","axios","resp","data","Error","statusText","fetchTrending","fetchDetailsMovie","fetchCast"],"sourceRoot":""}