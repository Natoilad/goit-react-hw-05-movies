{"version":3,"file":"static/js/387.592bc529.chunk.js","mappings":"4PACaA,EAAgBC,EAAAA,EAAAA,IAAH,oPAcbC,EAAWD,EAAAA,EAAAA,IAAH,oWAmBRE,EAAIF,EAAAA,EAAAA,EAAH,wC,SCWd,EAvCa,WACX,OAAoCG,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAQR,OANAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAUH,GAASI,MAAK,SAAAC,GACtBN,EAAcM,EAAcC,KAC7B,GACF,GAAE,CAACN,KAGF,SAACP,EAAD,UACGK,EAAWS,OAAS,EACnBT,EAAWU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,UAAWC,EAAhC,EAAgCA,KAAhC,OACb,UAACjB,EAAD,WACGe,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAKF,KAIP,SAAC,MAAD,CAAoBG,KAAM,OAE5B,SAACnB,EAAD,WACE,uBAAIgB,OAEN,UAAChB,EAAD,wBAEE,kBAFF,IAEUe,EAAUK,OAAO,EAAG,QAfjBP,EADF,KAqBf,SAACb,EAAD,4CAIP,C,8LC1CKqB,EAAW,+BACXC,EAAU,mCAEHC,EAAiB,mCAAG,WAAMC,GAAN,gGAEVC,EAAAA,EAAAA,IAAA,UACdJ,EADc,iCACmBC,EADnB,kBACoCE,EADpC,+CAFU,cAEvBE,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBC,EAAa,mCAAG,6GAENL,EAAAA,EAAAA,IAAA,UACdJ,EADc,wCAC0BC,EAD1B,YAFM,cAEnBI,EAFmB,yBAKlBA,EAAKC,MALa,sCAOnB,IAAIC,MAAM,KAAMC,YAPG,yDAAH,qDAWbE,EAAiB,mCAAG,WAAMlB,GAAN,gGAEVY,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIR,EADJ,oBACkBS,EADlB,2BAFU,cAEvBI,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBtB,EAAS,mCAAG,WAAMM,GAAN,gGAEFY,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIR,EADJ,4BAC0BS,EAD1B,oBAFE,cAEfI,EAFe,yBAKdA,EAAKC,MALS,sCAOf,IAAIC,MAAM,KAAMC,YAPD,yDAAH,sDAWTG,EAAY,mCAAG,WAAMnB,GAAN,gGAELY,EAAAA,EAAAA,IAAA,UACdJ,EADc,kBACIR,EADJ,4BAC0BS,EAD1B,oBAFK,cAElBI,EAFkB,yBAKjBA,EAAKC,MALY,sCAOlB,IAAIC,MAAM,KAAMC,YAPE,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","service/serviceAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\nexport const CastContainer = styled.div`\n  padding-top: 30px;\n  padding-bottom: 50px;\n  text-align: center;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n\n  @media (max-width: 600px) {\n    justify-content: 'center';\n  }\n`;\n\nexport const CastCard = styled.div`\n  width: 180px;\n  margin-bottom: 5px;\n  border: 1px solid;\n  padding: 10px;\n  justify-content: space-between;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid;\n  :hover {\n    scale: 1.1;\n  }\n  @media (max-width: 600px) {\n    zoom: 1.5;\n    // scale 1.5;\n    // width: 350px;\n    // height: 600px;\n  }\n`;\nexport const P = styled.p`\n  margin: 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'service/serviceAPI';\nimport { AiOutlineFileImage } from 'react-icons/ai';\nimport { CastCard, CastContainer, P } from './Cast.styled';\n\nconst Cast = () => {\n  const [moviesCast, setMoviesCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    fetchCast(movieId).then(respMovieCast => {\n      setMoviesCast(respMovieCast.cast);\n    });\n  }, [movieId]);\n\n  return (\n    <CastContainer>\n      {moviesCast.length > 0 ? (\n        moviesCast.map(({ id, profile_path, character, name }) => (\n          <CastCard key={id}>\n            {profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n                alt={name}\n                // width={180}\n              />\n            ) : (\n              <AiOutlineFileImage size={200} />\n            )}\n            <P>\n              <b>{name}</b>\n            </P>\n            <P>\n              Character\n              <br /> {character.substr(0, 9)}\n            </P>\n          </CastCard>\n        ))\n      ) : (\n        <P> Sorry, there isn't any info</P>\n      )}\n    </CastContainer>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '178b07d62e47484c1918df64bd242568';\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&language=en-US&include_adult=false`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchTrending = async () => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=1`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchDetailsMovie = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&page=1&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n"],"names":["CastContainer","styled","CastCard","P","useState","moviesCast","setMoviesCast","movieId","useParams","useEffect","fetchCast","then","respMovieCast","cast","length","map","id","profile_path","character","name","src","alt","size","substr","BASE_URL","API_KEY","fetchSearchMovies","query","axios","resp","data","Error","statusText","fetchTrending","fetchDetailsMovie","fetchReviews"],"sourceRoot":""}