{"version":3,"file":"static/js/304.655165fd.chunk.js","mappings":"oKAqBA,IAnB0B,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,wBACGF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACjB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFID,EAMZ,OAEH,SAAC,KAAD,MAGL,C,6BCjBD,IAHsB,WAErB,C,oHCuBD,EAvB2B,SAAC,GAAkB,IAAhBK,EAAe,EAAfA,SAC5BC,QAAQC,IAAR,gBAAqBF,IACrB,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,0BACE,kBAAML,SAVW,SAAAM,GAEnB,GADAA,EAAEC,kBACGH,EACH,OAAOI,MAAM,8BAGfH,EAAS,GACV,EAGG,WACE,kBAAOI,KAAK,OAAOC,KAAK,QAAQC,MAAOP,EAAOQ,SAdhC,SAAAC,GAClBR,EAASQ,EAAIC,OAAOH,MAAMI,cAC3B,KAaK,mBAAQN,KAAK,SAAb,wBAIP,E,iBCoBD,EArCe,WAAO,IAAD,EACnB,GAAwCO,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAC/C,GAA4BjB,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAe8B,EAAf,KACA,GAA8BlB,EAAAA,EAAAA,WAAS,GAAvC,eAAOmB,EAAP,KAAgBC,EAAhB,KACA,GAA0BpB,EAAAA,EAAAA,UAAS,MAAnC,eAAOqB,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACHP,IAILE,EAAU,IACVE,GAAW,IACXI,EAAAA,EAAAA,IAAkBR,GACfS,MAAK,SAAAC,GACJR,EAAUQ,EAAWC,QACtB,IACAC,OAAM,SAAAP,GAAK,OAAIC,EAASD,EAAb,IACXQ,SAAQ,SAAAV,GAAO,OAAIC,GAAW,EAAf,IACnB,GAAE,CAACJ,IAMJ,OACE,2BACGK,IAAS,wBAAKA,EAAMS,WACrB,SAAC,EAAD,CAAatB,MAAOQ,EAAWe,SARZ,SAAA9B,GAErBc,EAD+B,KAAVd,EAAe,CAAEA,MAAAA,GAAU,CAAC,GAEjDiB,EAAU,GACX,IAKI9B,EAAO4C,OAAS,IAAK,SAACC,EAAA,EAAD,CAAY7C,OAAQA,IACzC+B,IAAW,SAACe,EAAA,EAAD,MAKjB,C,+ICzCKC,EAAW,+BACXC,EAAU,mCAEHZ,EAAiB,mCAAG,WAAMvB,GAAN,gGAEVoC,EAAAA,EAAAA,IAAA,UACdF,EADc,iCACmBC,EADnB,kBACoCnC,EADpC,+CAFU,cAEvBqC,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,sDAWjBC,EAAa,mCAAG,6GAENL,EAAAA,EAAAA,IAAA,UACdF,EADc,wCAC0BC,EAD1B,YAFM,cAEnBE,EAFmB,yBAKlBA,EAAKC,MALa,sCAOnB,IAAIC,MAAM,KAAMC,YAPG,yDAAH,qDAWbE,EAAiB,mCAAG,WAAMnD,GAAN,gGAEV6C,EAAAA,EAAAA,IAAA,UACdF,EADc,kBACI3C,EADJ,oBACkB4C,EADlB,2BAFU,cAEvBE,EAFuB,yBAKtBA,EAAKC,MALiB,sCAOvB,IAAIC,MAAM,KAAMC,YAPO,yDAAH,qD","sources":["components/ListMovies/ListMovies.jsx","components/Loader/Loader.jsx","components/SearchInput/SearchInput.jsx","pages/Movies/Movies.jsx","service/serviceAPI.js"],"sourcesContent":["import { Link, Outlet, useLocation } from 'react-router-dom';\n// import { PropTypes } from 'prop-types';\nexport const ListMovies = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, title }) => {\n          return (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n      <Outlet />\n    </>\n  );\n};\nexport default ListMovies;\n","export const Loader = () => {\n  <div>Loading...</div>;\n};\nexport default Loader;\n","import { useState } from 'react';\n\nexport const SearchInput = ({ onSubmit }) => {\n  console.log(`FUNC? ${onSubmit}`);\n  const [query, setQuery] = useState('');\n  const changeQuery = evt => {\n    setQuery(evt.target.value.toLowerCase());\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      return alert('Please enter search movies');\n    }\n    // onSubmit(query);\n    setQuery('');\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" value={query} onChange={changeQuery} />\n        <button type=\"submit\">search</button>\n      </form>\n    </div>\n  );\n};\nexport default SearchInput;\n","import ListMovies from 'components/ListMovies/ListMovies';\nimport Loader from 'components/Loader/Loader';\nimport SearchInput from 'components/SearchInput/SearchInput';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from 'service/serviceAPI';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') ?? '';\n  const [movies, setMovies] = useState([]);\n  const [loadind, setLoadind] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n\n    setMovies([]);\n    setLoadind(true);\n    fetchSearchMovies(movieName)\n      .then(respMovies => {\n        setMovies(respMovies.results);\n      })\n      .catch(error => setError(error))\n      .finally(loadind => setLoadind(false));\n  }, [movieName]);\n  const handleOnSubmit = query => {\n    const changeParams = query !== '' ? { query } : {};\n    setSearchParams(changeParams);\n    setMovies([]);\n  };\n  return (\n    <div>\n      {error && <h2>{error.message}</h2>}\n      <SearchInput value={movieName} onSearch={handleOnSubmit} />\n      {movies.length > 0 && <ListMovies movies={movies} />}\n      {loadind && <Loader />}\n    </div>\n\n    //   // <div>Movies</div>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '178b07d62e47484c1918df64bd242568';\n\nexport const fetchSearchMovies = async query => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}&page=1&language=en-US&include_adult=false`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchTrending = async () => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/trending/movie/week?api_key=${API_KEY}&page=1`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchDetailsMovie = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${API_KEY}&page=1&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchCast = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n\nexport const fetchReviews = async id => {\n  try {\n    const resp = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    );\n    return resp.data;\n  } catch (error) {\n    throw new Error(error.statusText);\n  }\n};\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","onSubmit","console","log","useState","query","setQuery","e","preventDefault","alert","type","name","value","onChange","evt","target","toLowerCase","useSearchParams","searchParams","setSearchParams","movieName","get","setMovies","loadind","setLoadind","error","setError","useEffect","fetchSearchMovies","then","respMovies","results","catch","finally","message","onSearch","length","ListMovies","Loader","BASE_URL","API_KEY","axios","resp","data","Error","statusText","fetchTrending","fetchDetailsMovie"],"sourceRoot":""}